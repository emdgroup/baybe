# Modeling a Mixture in Traditional Representation

When modeling mixtures, we are often faced with a large set of ingredients to choose
from. A common way to formalize this type of selection problem is to assign each
ingredient its own numerical parameter representing the amount of the ingredient in
the mixture. A sum constraint imposed on all parameters then ensures that the total
amount of ingredients in the mix is always 100%. In addition, there could be other
constraints, for instance, to impose further restrictions on individual subgroups of
ingredients. In BayBE's language, we call this the *traditional mixture
representation*.

In this example, we demonstrate how to create a search space in this representation,
using a simple mixture of up to six components, which are divided into three
subgroups: solvents, bases and phase agents.

```{admonition} Slot-based Representation
:class: seealso
For an alternative way to describe mixtures, see our
[slot-based representation](/examples/Mixtures/slot_based.md).
```

## Imports


```python
import numpy as np
import pandas as pd
```


```python
from baybe.constraints import ContinuousLinearConstraint
from baybe.parameters import NumericalContinuousParameter
from baybe.recommenders import RandomRecommender
from baybe.searchspace import SearchSpace
```

## Parameter Setup

We start by creating lists containing our substance labels according to their
subgroups:


```python
g1 = ["Solvent1", "Solvent2"]
g2 = ["Base1", "Base2"]
g3 = ["PhaseAgent1", "PhaseAgent2"]
```

Next, we create continuous parameters describing the substance amounts for each group.
Here, the maximum amount for each substance depends on its group, i.e. we allow
adding more of a solvent compared to a base or a phase agent:


```python
p_g1_amounts = [
    NumericalContinuousParameter(name=f"{name}", bounds=(0, 80)) for name in g1
]
p_g2_amounts = [
    NumericalContinuousParameter(name=f"{name}", bounds=(0, 20)) for name in g2
]
p_g3_amounts = [
    NumericalContinuousParameter(name=f"{name}", bounds=(0, 5)) for name in g3
]
```

## Constraints Setup

Now, we set up our constraints. We start with the overall mixture constraint, ensuring
the total of all ingredients is 100%:


```python
c_total_sum = ContinuousLinearConstraint(
    parameters=g1 + g2 + g3,
    operator="=",
    coefficients=[1] * len(g1 + g2 + g3),
    rhs=100,
)
```

Additionally, we require bases make up at least 10% of the mixture:


```python
c_g2_min = ContinuousLinearConstraint(
    parameters=g2,
    operator=">=",
    coefficients=[1] * len(g2),
    rhs=10,
)
```

By contrast, phase agents should make up no more than 5%:


```python
c_g3_max = ContinuousLinearConstraint(
    parameters=g3,
    operator="<=",
    coefficients=[1] * len(g3),
    rhs=5,
)
```

## Search Space Creation

Having both parameter and constraint definitions at hand, we can create our
search space:


```python
searchspace = SearchSpace.from_product(
    parameters=[*p_g1_amounts, *p_g2_amounts, *p_g3_amounts],
    constraints=[c_total_sum, c_g2_min, c_g3_max],
)
```

## Verification of Constraints

To verify that the constraints imposed above are fulfilled, let us draw some
random points from the search space:


```python
recommendations = RandomRecommender().recommend(batch_size=10, searchspace=searchspace)
print(recommendations)
```

           Base1      Base2  PhaseAgent1  PhaseAgent2   Solvent1   Solvent2
    0   2.897634  17.977216     0.032530     4.785303  64.279417  10.027900
    1   7.241315   7.878412     1.226731     2.369171  37.250128  44.034244
    2  17.924795   5.784793     0.531229     1.143777  65.716524   8.898881
    3  14.190793  11.869930     1.095815     3.473209  15.233627  54.136626
    4  16.173735  16.286480     0.333582     0.595998   0.664179  65.946025
    5  13.666452   0.839197     2.862869     1.746995  12.311716  68.572771
    6   1.289171  12.928198     2.889867     0.945490  18.716532  63.230742
    7   6.629843   6.437180     1.323973     3.544026  17.648565  64.416413
    8  18.807997   2.225689     1.419673     1.848146  44.187347  31.511148
    9  18.480417   6.490951     0.102010     4.362486  44.872161  25.691976


Computing the respective row sums reveals the expected result:


```python
stats = pd.DataFrame(
    {
        "Total": recommendations.sum(axis=1),
        "Total_Bases": recommendations[g2].sum(axis=1),
        "Total_Phase_Agents": recommendations[g3].sum(axis=1),
    }
)
print(stats)
```

       Total  Total_Bases  Total_Phase_Agents
    0  100.0    20.874850            4.817833
    1  100.0    15.119726            3.595902
    2  100.0    23.709588            1.675006
    3  100.0    26.060723            4.569023
    4  100.0    32.460216            0.929580
    5  100.0    14.505649            4.609863
    6  100.0    14.217368            3.835358
    7  100.0    13.067023            4.867998
    8  100.0    21.033686            3.267819
    9  100.0    24.971368            4.464495



```python
assert np.allclose(stats["Total"], 100)
assert (stats["Total_Bases"] >= 10).all()
assert (stats["Total_Phase_Agents"] <= 5).all()
```
