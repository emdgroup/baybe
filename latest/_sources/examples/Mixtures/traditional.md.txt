# Modeling a Mixture in Traditional Representation

When modeling mixtures, we are often faced with a large set of ingredients to choose
from. A common way to formalize this type of selection problem is to assign each
ingredient its own numerical parameter representing the amount of the ingredient in
the mixture. A sum constraint imposed on all parameters then ensures that the total
amount of ingredients in the mix is always 100%. In addition, there could be other
constraints, for instance, to impose further restrictions on individual subgroups of
ingredients. In BayBE's language, we call this the *traditional mixture
representation*.

In this example, we demonstrate how to create a search space in this representation,
using a simple mixture of up to six components, which are divided into three
subgroups: solvents, bases and phase agents.

```{admonition} Slot-based Representation
:class: seealso
For an alternative way to describe mixtures, see our
[slot-based representation](/examples/Mixtures/slot_based.md).
```

## Imports


```python
import numpy as np
import pandas as pd
```


```python
from baybe.constraints import ContinuousLinearConstraint
from baybe.parameters import NumericalContinuousParameter
from baybe.recommenders import RandomRecommender
from baybe.searchspace import SearchSpace
```

## Parameter Setup

We start by creating lists containing our substance labels according to their
subgroups:


```python
g1 = ["Solvent1", "Solvent2"]
g2 = ["Base1", "Base2"]
g3 = ["PhaseAgent1", "PhaseAgent2"]
```

Next, we create continuous parameters describing the substance amounts for each group.
Here, the maximum amount for each substance depends on its group, i.e. we allow
adding more of a solvent compared to a base or a phase agent:


```python
p_g1_amounts = [
    NumericalContinuousParameter(name=f"{name}", bounds=(0, 80)) for name in g1
]
p_g2_amounts = [
    NumericalContinuousParameter(name=f"{name}", bounds=(0, 20)) for name in g2
]
p_g3_amounts = [
    NumericalContinuousParameter(name=f"{name}", bounds=(0, 5)) for name in g3
]
```

## Constraints Setup

Now, we set up our constraints. We start with the overall mixture constraint, ensuring
the total of all ingredients is 100%:


```python
c_total_sum = ContinuousLinearConstraint(
    parameters=g1 + g2 + g3,
    operator="=",
    coefficients=(1,) * len(g1 + g2 + g3),
    rhs=100,
)
```

Additionally, we require bases make up at least 10% of the mixture:


```python
c_g2_min = ContinuousLinearConstraint(
    parameters=g2,
    operator=">=",
    coefficients=(1,) * len(g2),
    rhs=10,
)
```

By contrast, phase agents should make up no more than 5%:


```python
c_g3_max = ContinuousLinearConstraint(
    parameters=g3,
    operator="<=",
    coefficients=(1,) * len(g3),
    rhs=5,
)
```

## Search Space Creation

Having both parameter and constraint definitions at hand, we can create our
search space:


```python
searchspace = SearchSpace.from_product(
    parameters=[*p_g1_amounts, *p_g2_amounts, *p_g3_amounts],
    constraints=[c_total_sum, c_g2_min, c_g3_max],
)
```

## Verification of Constraints

To verify that the constraints imposed above are fulfilled, let us draw some
random points from the search space:


```python
recommendations = RandomRecommender().recommend(batch_size=10, searchspace=searchspace)
print(recommendations)
```

           Base1      Base2  PhaseAgent1  PhaseAgent2   Solvent1   Solvent2
    0  19.094748   6.916619     0.632769     3.354833   2.253769  67.747262
    1  17.303191   3.491054     0.557082     4.122519   0.099023  74.427132
    2   5.032145  15.449742     1.115390     2.569640  18.139894  57.693190
    3  11.297662   7.241673     3.778538     0.096507  43.235967  34.349653
    4   3.028733  11.722192     4.100656     0.169882  51.665448  29.313089
    5  18.251216   7.829406     4.586466     0.307890  68.877830   0.147192
    6   9.559768   6.931143     0.802597     3.299566  13.783773  65.623154
    7   6.499214  12.445576     0.112129     1.314425  12.380627  67.248029
    8   0.135505  11.646287     0.544223     0.856701  17.517137  69.300148
    9   7.803609  15.144168     1.479054     1.180952   4.468220  69.923997


Computing the respective row sums reveals the expected result:


```python
stats = pd.DataFrame(
    {
        "Total": recommendations.sum(axis=1),
        "Total_Bases": recommendations[g2].sum(axis=1),
        "Total_Phase_Agents": recommendations[g3].sum(axis=1),
    }
)
print(stats)
```

       Total  Total_Bases  Total_Phase_Agents
    0  100.0    26.011367            3.987602
    1  100.0    20.794244            4.679601
    2  100.0    20.481887            3.685030
    3  100.0    18.539335            3.875045
    4  100.0    14.750925            4.270538
    5  100.0    26.080622            4.894356
    6  100.0    16.490911            4.102162
    7  100.0    18.944791            1.426554
    8  100.0    11.781792            1.400924
    9  100.0    22.947778            2.660006



```python
assert np.allclose(stats["Total"], 100)
assert (stats["Total_Bases"] >= 10).all()
assert (stats["Total_Phase_Agents"] <= 5).all()
```
