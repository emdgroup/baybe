# Creating Continuous Search Spaces

This example illustrates several ways to create continuous spaces space.

## Imports


```python
import numpy as np
```


```python
from baybe.parameters import NumericalContinuousParameter
from baybe.searchspace import SearchSpace, SubspaceContinuous
```

## Settings

We begin by defining the continuous parameters that span our space:


```python
DIMENSION = 4
BOUNDS = (-1, 1)
```


```python
parameters = [
    NumericalContinuousParameter(name=f"x_{k + 1}", bounds=BOUNDS)
    for k in range(DIMENSION)
]
```

From these parameter objects, we can now construct a continuous subspace.
Let us draw some samples from it and verify that they are within the bounds:


```python
subspace = SubspaceContinuous(parameters)
samples = subspace.sample_uniform(10)
print(samples)
assert np.all(samples >= BOUNDS[0]) and np.all(samples <= BOUNDS[1])
```

            x_1       x_2       x_3       x_4
    0  0.629938  0.084646  0.848101 -0.268302
    1  0.578724 -0.127233 -0.263484  0.025510
    2  0.897147  0.204987  0.815435  0.488042
    3  0.054996 -0.186017 -0.366019 -0.763711
    4 -0.219889 -0.798653  0.844131 -0.779749
    5 -0.705336 -0.785495 -0.529375  0.973500
    6 -0.580839  0.269283 -0.778839 -0.131386
    7 -0.087838  0.687478  0.123592 -0.462052
    8 -0.884625  0.154203  0.376723  0.343283
    9  0.344418  0.880539  0.326845 -0.998283


There are several ways we can turn the above objects into a search space.
This provides a lot of flexibility depending on the context:


```python
# Using conversion:
searchspace1 = SubspaceContinuous(parameters).to_searchspace()
```


```python
# Explicit attribute assignment via the regular search space constructor:
searchspace2 = SearchSpace(continuous=SubspaceContinuous(parameters))
```


```python
# Using an alternative search space constructor:
searchspace3 = SearchSpace.from_product(parameters=parameters)
```

No matter which version we choose, we can be sure that the resulting search space
objects are equivalent:


```python
assert searchspace1 == searchspace2 == searchspace3
```
