# Creating Continuous Search Spaces

This example illustrates several ways to create continuous spaces space.

## Imports


```python
import numpy as np
```


```python
from baybe.parameters import NumericalContinuousParameter
from baybe.searchspace import SearchSpace, SubspaceContinuous
```

## Settings

We begin by defining the continuous parameters that span our space:


```python
DIMENSION = 4
BOUNDS = (-1, 1)
```


```python
parameters = [
    NumericalContinuousParameter(name=f"x_{k + 1}", bounds=BOUNDS)
    for k in range(DIMENSION)
]
```

From these parameter objects, we can now construct a continuous subspace.
Let us draw some samples from it and verify that they are within the bounds:


```python
subspace = SubspaceContinuous(parameters)
samples = subspace.sample_uniform(10)
print(samples)
assert np.all(samples >= BOUNDS[0]) and np.all(samples <= BOUNDS[1])
```

            x_1       x_2       x_3       x_4
    0  0.762214  0.379729  0.490231  0.102433
    1 -0.293545  0.694309  0.818240  0.289186
    2  0.104307  0.362675  0.351537 -0.948530
    3 -0.838728  0.629690  0.781652  0.631283
    4 -0.122934 -0.484942  0.654367  0.624207
    5  0.853146  0.482296 -0.138173  0.742906
    6 -0.641110  0.606262  0.441258  0.965928
    7  0.487700  0.191413  0.331489 -0.794902
    8  0.552083  0.978868 -0.166236 -0.555777
    9 -0.723076  0.923051 -0.862422  0.695544


There are several ways we can turn the above objects into a search space.
This provides a lot of flexibility depending on the context:


```python
# Using conversion:
searchspace1 = SubspaceContinuous(parameters).to_searchspace()
```


```python
# Explicit attribute assignment via the regular search space constructor:
searchspace2 = SearchSpace(continuous=SubspaceContinuous(parameters))
```


```python
# Using an alternative search space constructor:
searchspace3 = SearchSpace.from_product(parameters=parameters)
```

No matter which version we choose, we can be sure that the resulting search space
objects are equivalent:


```python
assert searchspace1 == searchspace2 == searchspace3
```
