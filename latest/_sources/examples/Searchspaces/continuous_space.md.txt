# Creating Continuous Search Spaces

This example illustrates several ways to create continuous spaces space.

## Imports


```python
import numpy as np
```


```python
from baybe.parameters import NumericalContinuousParameter
from baybe.searchspace import SearchSpace, SubspaceContinuous
```

## Settings

We begin by defining the continuous parameters that span our space:


```python
DIMENSION = 4
BOUNDS = (-1, 1)
```


```python
parameters = [
    NumericalContinuousParameter(name=f"x_{k+1}", bounds=BOUNDS)
    for k in range(DIMENSION)
]
```

From these parameter objects, we can now construct a continuous subspace.
Let us draw some samples from it and verify that they are within the bounds:


```python
subspace = SubspaceContinuous(parameters)
samples = subspace.sample_uniform(10)
print(samples)
assert np.all(samples >= BOUNDS[0]) and np.all(samples <= BOUNDS[1])
```

            x_1       x_2       x_3       x_4
    0  0.033201 -0.166870  0.492806  0.922084
    1  0.112667  0.316886 -0.355080 -0.692188
    2  0.860684 -0.415444 -0.823631 -0.629693
    3  0.825896 -0.332233 -0.547408 -0.462856
    4 -0.199685  0.538326  0.129818 -0.878820
    5  0.688829 -0.563697  0.107345  0.908515
    6 -0.642945 -0.574713  0.878216 -0.878978
    7  0.829425 -0.779945  0.576576  0.704962
    8  0.875503 -0.084171  0.871999  0.155790
    9 -0.905391  0.516883  0.912288 -0.457643


There are several ways we can turn the above objects into a search space.
This provides a lot of flexibility depending on the context:


```python
# Using conversion:
searchspace1 = SubspaceContinuous(parameters).to_searchspace()
```


```python
# Explicit attribute assignment via the regular search space constructor:
searchspace2 = SearchSpace(continuous=SubspaceContinuous(parameters))
```


```python
# Using an alternative search space constructor:
searchspace3 = SearchSpace.from_product(parameters=parameters)
```

No matter which version we choose, we can be sure that the resulting search space
objects are equivalent:


```python
assert searchspace1 == searchspace2 == searchspace3
```
