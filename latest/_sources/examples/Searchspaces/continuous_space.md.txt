# Creating Continuous Search Spaces

This example illustrates several ways to create continuous spaces space.

## Imports


```python
import numpy as np
```


```python
from baybe.parameters import NumericalContinuousParameter
from baybe.searchspace import SearchSpace, SubspaceContinuous
```

## Settings

We begin by defining the continuous parameters that span our space:


```python
DIMENSION = 4
BOUNDS = (-1, 1)
```


```python
parameters = [
    NumericalContinuousParameter(name=f"x_{k + 1}", bounds=BOUNDS)
    for k in range(DIMENSION)
]
```

From these parameter objects, we can now construct a continuous subspace.
Let us draw some samples from it and verify that they are within the bounds:


```python
subspace = SubspaceContinuous(parameters)
samples = subspace.sample_uniform(10)
print(samples)
assert np.all(samples >= BOUNDS[0]) and np.all(samples <= BOUNDS[1])
```

            x_1       x_2       x_3       x_4
    0  0.404431 -0.222473 -0.866531  0.967736
    1 -0.170116  0.575211 -0.774264 -0.784922
    2 -0.360561 -0.383491  0.343372  0.927687
    3  0.699653  0.187260 -0.855570 -0.696158
    4  0.532788 -0.931059 -0.075322 -0.238237
    5  0.910564 -0.109715 -0.245829 -0.674574
    6  0.533462 -0.086616  0.300041 -0.987960
    7 -0.950841  0.425985 -0.565735  0.276028
    8  0.393425 -0.579906 -0.388771 -0.134112
    9  0.450308  0.775262 -0.181255 -0.708894


There are several ways we can turn the above objects into a search space.
This provides a lot of flexibility depending on the context:


```python
# Using conversion:
searchspace1 = SubspaceContinuous(parameters).to_searchspace()
```


```python
# Explicit attribute assignment via the regular search space constructor:
searchspace2 = SearchSpace(continuous=SubspaceContinuous(parameters))
```


```python
# Using an alternative search space constructor:
searchspace3 = SearchSpace.from_product(parameters=parameters)
```

No matter which version we choose, we can be sure that the resulting search space
objects are equivalent:


```python
assert searchspace1 == searchspace2 == searchspace3
```
